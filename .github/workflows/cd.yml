name: CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build and push backend image
      working-directory: backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: jubensha-backend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Build and push frontend image
      working-directory: frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: jubensha-frontend
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Update kube config
      run: aws eks update-kubeconfig --name jubensha-cluster --region ap-northeast-1
    
    - name: Deploy to staging
      run: |
        kubectl set image deployment/backend backend=${{ steps.login-ecr.outputs.registry }}/jubensha-backend:${{ github.sha }} -n staging
        kubectl set image deployment/frontend frontend=${{ steps.login-ecr.outputs.registry }}/jubensha-frontend:${{ github.sha }} -n staging
        kubectl rollout status deployment/backend -n staging
        kubectl rollout status deployment/frontend -n staging

  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: 
      name: production
      url: https://jubensha.example.com
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-1
    
    - name: Update kube config
      run: aws eks update-kubeconfig --name jubensha-cluster --region ap-northeast-1
    
    - name: Deploy to production
      run: |
        kubectl set image deployment/backend backend=${{ steps.login-ecr.outputs.registry }}/jubensha-backend:${{ github.sha }} -n production
        kubectl set image deployment/frontend frontend=${{ steps.login-ecr.outputs.registry }}/jubensha-frontend:${{ github.sha }} -n production
        kubectl rollout status deployment/backend -n production
        kubectl rollout status deployment/frontend -n production

  notify:
    needs: [deploy-prod]
    runs-on: ubuntu-latest
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
